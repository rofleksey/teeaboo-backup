/**
 * videojs-mobile-ui
 * @version 0.4.1
 * @copyright 2018 mister-ben <git@misterben.me>
 * @license MIT
 */
!(function (e, t) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = t(require('video.js'), require('global/window')) : typeof define === 'function' && define.amd ? define(['video.js', 'global/window'], t) : e.videojsMobileUi = t(e.videojs, e.window); }(this, (e, t) => {
  e = e && e.hasOwnProperty('default') ? e.default : e, t = t && t.hasOwnProperty('default') ? t.default : t; const n = function (e, t) { if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function'); }; const o = function (e, t) { if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || typeof t !== 'object' && typeof t !== 'function' ? e : t; }; const i = e.getComponent('Component'); const r = e.dom || e; const a = (function (e) {
    function i(t, r) { n(this, i); const a = o(this, e.call(this, t, r)); return a.seekSeconds = r.seekSeconds, a.tapTimeout = r.tapTimeout, a.addChild('playToggle', {}), t.on(['playing', 'userinactive'], (e) => { a.removeClass('show-play-toggle'); }), a.player_.options_.inactivityTimeout === 0 && (a.player_.options_.inactivityTimeout = 5e3), a.enable(), a; } return (function (e, t) {
      if (typeof t !== 'function' && t !== null) throw new TypeError(`Super expression must either be null or a function, not ${typeof t}`); e.prototype = Object.create(t && t.prototype, {
        constructor: {
          value: e, enumerable: !1, writable: !0, configurable: !0,
        },
      }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }(i, e)), i.prototype.createEl = function () { return r.createEl('div', { className: 'vjs-touch-overlay', tabIndex: -1 }); }, i.prototype.handleTap = function (e) { const n = this; e.target === this.el_ && (e.preventDefault(), this.firstTapCaptured ? (this.firstTapCaptured = !1, this.timeout && t.clearTimeout(this.timeout), this.handleDoubleTap(e)) : (this.firstTapCaptured = !0, this.timeout = t.setTimeout(() => { n.firstTapCaptured = !1, n.handleSingleTap(e); }, this.tapTimeout))); }, i.prototype.handleSingleTap = function (e) { this.removeClass('skip'), this.toggleClass('show-play-toggle'); }, i.prototype.handleDoubleTap = function (e) { const n = this; const o = this.el_.getBoundingClientRect(); const i = e.changedTouches[0].clientX - o.left; if (i < 0.4 * o.width) this.player_.currentTime(Math.max(0, this.player_.currentTime() - this.seekSeconds)), this.addClass('reverse'); else { if (!(i > o.width - 0.4 * o.width)) return; this.player_.currentTime(Math.min(this.player_.duration(), this.player_.currentTime() + this.seekSeconds)), this.removeClass('reverse'); } this.removeClass('show-play-toggle'), this.removeClass('skip'), t.requestAnimationFrame(() => { n.addClass('skip'); }); }, i.prototype.enable = function () { this.firstTapCaptured = !1, this.on('touchend', this.handleTap); }, i.prototype.disable = function () { this.off('touchend', this.handleTap); }, i;
  }(i)); i.registerComponent('TouchOverlay', a); const s = { fullscreen: { enterOnRotate: !0, lockOnRotate: !0, iOS: !1 }, touchControls: { seekSeconds: 10, tapTimeout: 300, disableOnEnd: !1 } }; const l = t.screen; const u = function (n, o) { n.addClass('vjs-mobile-ui'), (o.touchControls.disableOnEnd || typeof n.endscreen === 'function') && n.addClass('vjs-mobile-ui-disable-end'), o.fullscreen.iOS && e.browser.IS_IOS && e.browser.IOS_VERSION > 9 && !n.el_.ownerDocument.querySelector('.bc-iframe') && (n.tech_.el_.setAttribute('playsinline', 'playsinline'), n.tech_.supportsFullScreen = function () { return !1; }); const i = n.children_.indexOf(n.getChild('ControlBar')) - 1; n.addChild('touchOverlay', o.touchControls, i); let r = !1; const a = function () { const i = typeof t.orientation === 'number' ? t.orientation : l && l.orientation && l.orientation.angle ? t.orientation : (e.log('angle unknown'), 0); i !== 90 && i !== 270 && i !== -90 || !1 === n.paused() && (n.requestFullscreen(), o.fullscreen.lockOnRotate && l.orientation && l.orientation.lock && l.orientation.lock('landscape').then(() => { r = !0; }).catch(() => { e.log('orientation lock not allowed'); })), i !== 0 && i !== 180 || n.isFullscreen() && n.exitFullscreen(); }; e.browser.IS_IOS ? t.addEventListener('orientationchange', a) : l.orientation.onchange = a, n.on('ended', (e) => { !0 === r && (l.orientation.unlock(), r = !1); }); }; const c = function (t) { const n = this; (e.browser.IS_ANDROID || e.browser.IS_IOS) && this.ready(() => { u(n, e.mergeOptions(s, t)); }); }; return (e.registerPlugin || e.plugin)('mobileUi', c), c.VERSION = '0.4.1', c;
}));
